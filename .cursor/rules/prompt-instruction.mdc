---
description: 
globs: 
alwaysApply: false
---
### 專案開發流程優化指令

#### 1. 需求確認與技術棧選擇
- 在開始開發前，必須先確認以下關鍵資訊：
  - 目標平台（Web、Mobile、桌面應用等）
  - AI 服務提供商偏好（Google Vertex AI、OpenAI、Azure 等）
  - 雲端服務選擇（Google Cloud、AWS、Azure）
  - 資料庫類型偏好（關聯式、NoSQL、混合）
  - 開發環境要求（本地容器化、雲端部署等）
- 若使用者未主動提供這些資訊，應主動詢問以避免後續返工

#### 2. 專案架構建立原則
- 優先建立完整的專案結構，包含：
  - 多應用程式架構（前端、後端、行動應用）
  - 共享套件管理
  - 開發工具配置（Docker、環境變數、腳本）
  - 文件結構（README、SETUP、API 文件）
- 建立可執行的環境設定腳本，減少手動配置
- 提供詳細的設定指南，包含外部服務配置步驟

#### 3. 程式碼實作策略
- 建立程式碼前先確認：
  - 是否有現有的程式碼結構需要遵循
  - 特定的程式設計模式或架構偏好
  - 依賴套件的版本要求
- 優先實作核心功能，再擴展附加功能
- 確保生成的程式碼可立即執行，包含所有必要的依賴

#### 4. 成本與效率優化
- 避免生成過長的雜湊值或二進位程式碼
- 重複使用已建立的配置和模式
- 在不確定時優先詢問澄清，而非假設需求
- 提供分階段的實作建議，允許使用者選擇優先級

#### 5. 溝通與確認機制
- 在關鍵決策點暫停並確認方向
- 提供多個選項供使用者選擇，而非單一方案
- 明確說明每個步驟的目的和預期結果
- 若有不清楚、或是需要我提供資訊以便更好的完成需要的地方，請對我提問以便補充這些資訊

#### 6. 文件與維護
- 自動生成相應的文件和註解
- 提供未來擴展的建議和指導
- 確保配置檔案的可維護性和可讀性
- 針對每次的需求完成，提出修改 