# Tasks - 在地人 AI 導覽系統

## Relevant Files

- `package.json` - 專案根目錄依賴和腳本配置
- `README.md` - 專案說明文件與設置指南
- `docker-compose.yml` - 開發環境容器配置
- `backend/package.json` - 後端專案依賴配置
- `backend/src/server.js` - Express 主伺服器設置與路由配置
- `backend/.env.example` - 環境變數範例文件
- `backend/.eslintrc.js` - 後端 ESLint 配置
- `.eslintrc.js` - 根目錄 ESLint 配置，支援 monorepo 結構前後端
- `.prettierrc.js` - Prettier 程式碼格式化配置
- `.prettierignore` - Prettier 忽略文件清單
- `frontend/web/package.json` - React 網頁應用依賴配置
- `frontend/web/src/App.js` - React 網頁應用主組件
- `frontend/web/src/index.js` - React 網頁應用入口文件
- `frontend/web/public/index.html` - HTML 模板文件
- `frontend/mobile/package.json` - React Native 移動應用依賴配置
- `frontend/mobile/App.js` - React Native 主應用組件
- `frontend/mobile/app.json` - Expo 配置文件
- `frontend/shared/api/client.js` - 共享 API 客戶端封裝
- `backend/src/config/database.js` - MongoDB 和 MySQL 資料庫連接配置
- `backend/src/config/redis.js` - Redis 快取配置
- `backend/src/config/index.js` - 統一配置管理與健康檢查
- `backend/src/config/firebase.js` - Firebase Admin SDK 配置檔案
- `backend/src/config/firebase.test.js` - Firebase 配置單元測試
- `backend/src/middleware/authMiddleware.js` - Firebase Authentication 中間件
- `backend/src/middleware/authMiddleware.test.js` - Firebase Authentication 中間件單元測試
- `backend/src/services/storageService.js` - Firebase Storage 服務封裝
- `backend/src/services/storageService.test.js` - Firebase Storage 服務單元測試
- `backend/src/services/messagingService.js` - Firebase Cloud Messaging 服務封裝（推播通知功能）
- `backend/src/services/messagingService.test.js` - Firebase Cloud Messaging 服務單元測試
- `backend/src/services/featureFlagService.js` - 功能旗標服務，支援金絲雀部署和功能控制
- `backend/src/services/featureFlagService.test.js` - 功能旗標服務單元測試
- `backend/src/middleware/featureFlagMiddleware.js` - 功能旗標中間件，用於路由級別的功能控制
- `backend/src/middleware/featureFlagMiddleware.test.js` - 功能旗標中間件單元測試
- `backend/src/routes/featureFlags.js` - 功能旗標管理 API 路由
- `backend/src/routes/auth.js` - 用戶認證相關 API 路由 (待建立)
- `backend/src/routes/auth.test.js` - 認證路由測試 (待建立)
- `backend/src/routes/tours.js` - 導覽相關 API 路由 (待建立)
- `backend/src/routes/tours.test.js` - 導覽路由測試 (待建立)
- `backend/src/routes/merchants.js` - 商戶管理 API 路由 (待建立)
- `backend/src/routes/merchants.test.js` - 商戶路由測試 (待建立)
- `backend/src/services/aiService.js` - Google AI studio API 整合服務 (待建立)
- `backend/src/services/aiService.test.js` - AI 服務單元測試 (待建立)
- `backend/src/services/ttsService.js` - 語音合成服務 (待建立)
- `backend/src/services/ttsService.test.js` - TTS 服務測試 (待建立)
- `backend/src/config/logger.js` - 增強版日誌系統（Winston + 日誌輪轉 + 結構化格式）
- `backend/src/config/logger.test.js` - 日誌系統單元測試
- `backend/src/middleware/performanceMonitor.js` - 效能監控中間件（CPU、記憶體、響應時間監控）
- `backend/src/middleware/performanceMonitor.test.js` - 效能監控中間件單元測試
- `backend/src/routes/monitoring.js` - 監控 API 路由（效能指標、健康檢查、日誌管理、錯誤追蹤）
- `backend/src/routes/monitoring.test.js` - 監控路由單元測試
- `backend/src/services/errorTrackingService.js` - 錯誤追蹤和通知服務（錯誤分類、通知門檻、統計分析）
- `backend/src/services/errorTrackingService.test.js` - 錯誤追蹤服務單元測試
- `backend/src/services/cacheService.js` - Redis 快取服務 (待建立)
- `backend/src/services/cacheService.test.js` - 快取服務測試 (待建立)
- `backend/src/models/User.js` - 用戶資料模型 (待建立)
- `backend/src/models/Tour.js` - 導覽內容資料模型 (待建立)
- `backend/src/models/Merchant.js` - 商戶資料模型 (待建立)
- `backend/src/models/Product.js` - 商品資料模型 (待建立)
- `frontend/mobile/src/screens/AuthScreen.js` - 手機端認證畫面 (待建立)
- `frontend/mobile/src/screens/TourScreen.js` - 手機端導覽畫面 (待建立)
- `frontend/web/src/components/MerchantDashboard.js` - 網頁端商戶後台 (待建立)
- `frontend/shared/i18n/` - 國際化配置檔案 (待建立)
- `jest.config.js` - Jest 測試配置，支援 monorepo 結構的統一測試管理
- `backend/src/config/swagger.js` - Swagger/OpenAPI 配置檔案（完整的 API 文檔定義和 Schema）
- `backend/src/test/swagger.test.js` - Swagger 配置單元測試
- `docs/api-documentation-guide.md` - API 文檔使用指南（開發者指南和最佳實踐）
- `backend/src/middleware/rateLimitMiddleware.js` - 專業級 Rate Limiting 中間件（支援 Redis、多層級限制、統計監控）
- `backend/src/middleware/rateLimitMiddleware.test.js` - Rate Limiting 中間件完整測試

### Notes

- 單元測試應與對應的程式碼檔案放在同一目錄中
- 使用 `npm test` 執行所有測試，或 `npm test -- --testPathPattern=specific-test` 執行特定測試
- API 測試使用 Supertest 進行整合測試
- 前端測試使用 React Testing Library
- 確保所有 API 端點都有對應的 OpenAPI 文檔

## Tasks

- [x] 1.0 系統基礎建設與架構設置
  - [x] 1.1 設置開發環境與專案結構（建立 Node.js 後端專案、React Native 和 React 前端專案）
  - [x] 1.2 配置資料庫連接（MongoDB 主庫、MySQL 交易庫、Redis 快取）
  - [x] 1.3 建立 Express 伺服器基礎架構與中間件配置
  - [x] 1.4 設置 Firebase 服務整合（Authentication、Storage、Cloud Messaging）
    - [x] 1.4.1 建立 Firebase 配置檔案（Firebase Admin SDK 初始化與配置管理）
    - [x] 1.4.2 建立 Firebase Authentication 中間件（JWT token 驗證與用戶認證）
    - [x] 1.4.3 建立 Firebase Storage 服務封裝（檔案上傳與下載功能）
    - [x] 1.4.4 建立 Firebase Cloud Messaging 服務封裝（推播通知功能）
  - [x] 1.5 配置 CI/CD 管道與自動化測試環境
    - [x] 1.5.1 建立根目錄 Jest 配置文件
    - [x] 1.5.2 建立根目錄 ESLint 和 Prettier 配置
    - [x] 1.5.3 修復 GitHub Actions workflow 路徑問題
    - [x] 1.5.4 完善測試腳本配置
    - [x] 1.5.5 驗證 CI/CD pipeline 運作
  - [x] 1.6 實作功能旗標服務基礎架構
  - [x] 1.7 設置監控系統（日誌收集、效能監控、錯誤追蹤）
    - [x] 1.7.1 增強日誌系統（結構化日誌、日誌分級、日誌輪轉）
    - [x] 1.7.2 建立效能監控中間件（CPU、記憶體、響應時間監控）
    - [x] 1.7.3 實作系統健康檢查端點
    - [x] 1.7.4 建立錯誤追蹤和通知系統
    - [x] 1.7.5 設置監控指標收集API
  - [x] 1.8 建立 API 文檔框架（OpenAPI/Swagger 配置）
    - [x] 1.8.1 為功能旗標路由添加 OpenAPI/Swagger 註解文檔
    - [x] 1.8.2 為監控路由添加 OpenAPI/Swagger 註解文檔
    - [x] 1.8.3 完善 Swagger 配置（添加更多 schema 定義）
    - [x] 1.8.4 測試 API 文檔功能並驗證文檔完整性
    - [x] 1.8.5 建立 API 文檔使用指南

- [ ] 2.0 用戶管理與認證系統
  - [x] 2.1 實作用戶註冊功能（Email 驗證、社交媒體登入整合）
    - **測試失敗項目記錄**：
      - Firebase Email 驗證測試失敗（3個測試） - 計劃在任務 2.2 修復 Firebase 配置
      - 部分 ESLint 錯誤 - 僅修復與任務 2.1 相關的錯誤，其他留待相關任務處理
  - [ ] 2.2 建立安全認證機制（JWT token 管理、Session 處理）
    - [x] 2.2.1 修復 Firebase Email 驗證測試失敗問題
    - [x] 2.2.2 實作 JWT token 管理策略（補充 Firebase token）
      - **修復完成**: JWT 整合測試全部通過，修復了用戶 UID 不匹配、測試超時、資料庫連接等問題
    - [x] 2.2.3 建立 Session 管理機制
      - [x] 2.2.3.1 實作 Session 安全驗證機制（IP 驗證、設備指紋、並發控制）
        - **已完成**: validateSessionSecurity() 方法支援 IP 地址變更檢測、設備指紋驗證
        - **已完成**: enforceConcurrentSessionLimit() 支援最多 5 個並發 session 控制
        - **已完成**: 安全標記系統和異常檢測機制
      - [x] 2.2.3.2 建立完整的 Session 管理 API 端點
        - **已完成**: `/api/v1/auth/session-info` - 獲取用戶所有 session 資訊
        - **已完成**: `/api/v1/auth/revoke-session` - 撤銷指定 session
        - **已完成**: `/api/v1/auth/revoke-all-other-sessions` - 撤銷其他所有 session
        - **已完成**: 完整的 OpenAPI/Swagger 文檔註解
      - [x] 2.2.3.3 實作 Session 過期和自動清理機制
        - **已完成**: 定時清理器（每小時執行 cleanupExpiredSessions()）
        - **已完成**: Session 閒置超時檢測（預設 24 小時）
        - **已完成**: 撤銷 session 的延遲刪除機制（30 分鐘後清理）
      - [x] 2.2.3.4 建立 Session 活動監控和異常檢測
        - **已完成**: updateSessionActivity() 自動更新最後活動時間
        - **已完成**: 異常檢測：IP 變更、設備指紋不匹配、閒置超時
        - **已完成**: 結構化日誌記錄所有 session 活動和安全事件
      - [x] 2.2.3.5 為新增的 Session 管理功能建立測試
        - **已完成**: JWT 服務的 Session 管理功能完整測試覆蓋
        - **已完成**: Session 創建、獲取、更新、撤銷的單元測試
        - **已完成**: 錯誤處理和邊界條件測試
        - **已完成**: Session 管理 API 端點的整合測試
    - [x] 2.2.4 實作 token 刷新和撤銷機制
    - [ ] 2.2.5 增強安全認證功能（rate limiting、多重驗證準備）
      - [ ] 2.2.5.1 實作完整的 Rate Limiting 中間件
        - [x] 2.2.5.1.1 替換 rateLimitMiddleware.js 的 stub 實作為真正的 rate limiting 功能
        - [ ] 2.2.5.1.2 實作分層級的 rate limiting 策略（一般、認證、敏感操作）
        - [ ] 2.2.5.1.3 建立 Redis 支援的分散式 rate limiting
        - [ ] 2.2.5.1.4 實作 rate limiting 的監控和統計功能
      - [ ] 2.2.5.2 實作安全增強中間件
        - [ ] 2.2.5.2.1 替換 securityEnhancement.js 的 stub 實作為真正的安全功能
        - [ ] 2.2.5.2.2 實作帳號鎖定機制（多次失敗登入保護）
        - [ ] 2.2.5.2.3 建立可疑活動檢測和風險評估系統
        - [ ] 2.2.5.2.4 實作登入失敗記錄和安全事件追蹤
      - [ ] 2.2.5.3 建立 MFA (多重驗證) 服務基礎架構
        - [ ] 2.2.5.3.1 建立 MFA 服務核心類別和配置
        - [ ] 2.2.5.3.2 實作 TOTP (Time-based One-Time Password) 功能
        - [ ] 2.2.5.3.3 實作 SMS 驗證碼功能準備
        - [ ] 2.2.5.3.4 建立 MFA 備用碼系統
      - [ ] 2.2.5.4 整合安全功能到認證流程
        - [ ] 2.2.5.4.1 為認證 API 端點整合新的安全中間件
        - [ ] 2.2.5.4.2 建立 MFA 狀態檢查和驗證 API 端點
        - [ ] 2.2.5.4.3 實作安全設定和管理 API
      - [ ] 2.2.5.5 建立完整的測試覆蓋
        - [ ] 2.2.5.5.1 為 Rate Limiting 中間件建立單元測試
        - [ ] 2.2.5.5.2 為安全增強中間件建立單元測試
        - [ ] 2.2.5.5.3 為 MFA 服務建立單元測試
        - [ ] 2.2.5.5.4 建立整合測試驗證完整的安全認證流程
  - [ ] 2.3 實作權限管理系統（一般用戶 vs 商戶用戶角色區分）
  - [ ] 2.4 開發密碼重設與帳號管理功能
  - [ ] 2.5 實作隱私資料保護機制（GDPR 合規、資料加密）
  - [ ] 2.6 建立用戶偏好設定功能（語言偏好、個人化設定）
  - [ ] 2.7 實作前端認證界面（登入/註冊表單、狀態管理）

- [ ] 3.0 AI 導覽核心功能開發
  - [ ] 3.1 整合 Google AI studio API 服務（API 金鑰管理、請求速率限制）
  - [ ] 3.2 實作導覽內容生成邏輯（個性化回答、上下文記憶）
  - [ ] 3.3 開發語音合成功能（Azure Speech Service 整合、多語言支援）
  - [ ] 3.4 建立內容快取機制（Redis 快取策略、快取失效管理）
  - [ ] 3.5 實作導覽對話界面（文字對話、語音播放控制）
  - [ ] 3.6 開發內容版本管理系統（內容更新、歷史紀錄）
  - [ ] 3.7 實作 AI 回應速度優化（並行處理、回應時間監控）
  - [ ] 3.8 建立內容審核機制（不當內容過濾、品質控制）

- [ ] 4.0 商戶後台管理系統
  - [ ] 4.1 實作商戶註冊與認證流程（身份驗證、商戶審核）
  - [ ] 4.2 開發內容管理系統（導覽內容上傳、編輯、刪除）
  - [ ] 4.3 建立檔案上傳功能（圖片、影片處理、S3 儲存整合）
  - [ ] 4.4 實作批量內容上傳功能（CSV 匯入、資料驗證）
  - [ ] 4.5 開發商品展示功能（商品資訊管理、分類系統）
  - [ ] 4.6 建立商戶後台儀表板（數據統計、內容管理介面）
  - [ ] 4.7 實作內容版本控制（草稿/發布狀態、變更歷史）
  - [ ] 4.8 開發內容搜尋與篩選功能（商品分類、關鍵字搜尋）

- [ ] 5.0 多語言支援與系統優化
  - [ ] 5.1 實作國際化框架（i18n 配置、語言包管理）
  - [ ] 5.2 開發自動語言偵測功能（瀏覽器語言、地理位置）
  - [ ] 5.3 建立多語言內容管理（翻譯工作流、品質控制）
  - [ ] 5.4 實作系統效能優化（程式碼分割、懶加載、圖片優化）
  - [ ] 5.5 建立安全性強化措施（SQL 注入防護、XSS 防護、CSRF 保護）
  - [ ] 5.6 實作系統備份與災害復原機制
  - [ ] 5.7 開發並發處理優化（支援 1000+ 同時用戶）
  - [ ] 5.8 實作用戶體驗優化（載入動畫、錯誤處理、離線支援）
