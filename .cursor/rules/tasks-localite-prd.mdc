---
description: 
globs: 
alwaysApply: true
---
# Tasks - 在地人 AI 導覽系統

## Relevant Files

- `backend/server.js` - Express 主伺服器設置與路由配置
- `backend/config/database.js` - MongoDB 和 MySQL 資料庫連接配置
- `backend/config/redis.js` - Redis 快取配置
- `backend/config/firebase.js` - Firebase 服務配置
- `backend/middleware/auth.js` - JWT 認證中間件
- `backend/middleware/auth.test.js` - 認證中間件單元測試
- `backend/routes/auth.js` - 用戶認證相關 API 路由
- `backend/routes/auth.test.js` - 認證路由測試
- `backend/routes/tours.js` - 導覽相關 API 路由
- `backend/routes/tours.test.js` - 導覽路由測試
- `backend/routes/merchants.js` - 商戶管理 API 路由
- `backend/routes/merchants.test.js` - 商戶路由測試
- `backend/services/aiService.js` - GPT API 整合服務
- `backend/services/aiService.test.js` - AI 服務單元測試
- `backend/services/ttsService.js` - 語音合成服務
- `backend/services/ttsService.test.js` - TTS 服務測試
- `backend/services/cacheService.js` - Redis 快取服務
- `backend/services/cacheService.test.js` - 快取服務測試
- `backend/models/User.js` - 用戶資料模型
- `backend/models/Tour.js` - 導覽內容資料模型
- `backend/models/Merchant.js` - 商戶資料模型
- `backend/models/Product.js` - 商品資料模型
- `frontend/mobile/` - React Native 手機應用
- `frontend/web/` - React 網頁應用
- `frontend/mobile/src/screens/AuthScreen.js` - 手機端認證畫面
- `frontend/mobile/src/screens/TourScreen.js` - 手機端導覽畫面
- `frontend/web/src/components/MerchantDashboard.js` - 網頁端商戶後台
- `frontend/shared/api/client.js` - API 客戶端封裝
- `frontend/shared/i18n/` - 國際化配置檔案
- `docker-compose.yml` - 開發環境容器配置
- `package.json` - 專案依賴配置
- `jest.config.js` - Jest 測試配置

### Notes

- 單元測試應與對應的程式碼檔案放在同一目錄中
- 使用 `npm test` 執行所有測試，或 `npm test -- --testPathPattern=specific-test` 執行特定測試
- API 測試使用 Supertest 進行整合測試
- 前端測試使用 React Testing Library
- 確保所有 API 端點都有對應的 OpenAPI 文檔

## Tasks

- [ ] 1.0 系統基礎建設與架構設置
  - [ ] 1.1 設置開發環境與專案結構（建立 Node.js 後端專案、React Native 和 React 前端專案）
  - [ ] 1.2 配置資料庫連接（MongoDB 主庫、MySQL 交易庫、Redis 快取）
  - [ ] 1.3 建立 Express 伺服器基礎架構與中間件配置
  - [ ] 1.4 設置 Firebase 服務整合（Authentication、Storage、Cloud Messaging）
  - [ ] 1.5 配置 CI/CD 管道與自動化測試環境
  - [ ] 1.6 實作功能旗標服務基礎架構
  - [ ] 1.7 設置監控系統（日誌收集、效能監控、錯誤追蹤）
  - [ ] 1.8 建立 API 文檔框架（OpenAPI/Swagger 配置）

- [ ] 2.0 用戶管理與認證系統
  - [ ] 2.1 實作用戶註冊功能（Email 驗證、社交媒體登入整合）
  - [ ] 2.2 建立安全認證機制（JWT token 管理、Session 處理）
  - [ ] 2.3 實作權限管理系統（一般用戶 vs 商戶用戶角色區分）
  - [ ] 2.4 開發密碼重設與帳號管理功能
  - [ ] 2.5 實作隱私資料保護機制（GDPR 合規、資料加密）
  - [ ] 2.6 建立用戶偏好設定功能（語言偏好、個人化設定）
  - [ ] 2.7 實作前端認證界面（登入/註冊表單、狀態管理）

- [ ] 3.0 AI 導覽核心功能開發
  - [ ] 3.1 整合 GPT API 服務（API 金鑰管理、請求速率限制）
  - [ ] 3.2 實作導覽內容生成邏輯（個性化回答、上下文記憶）
  - [ ] 3.3 開發語音合成功能（Azure Speech Service 整合、多語言支援）
  - [ ] 3.4 建立內容快取機制（Redis 快取策略、快取失效管理）
  - [ ] 3.5 實作導覽對話界面（文字對話、語音播放控制）
  - [ ] 3.6 開發內容版本管理系統（內容更新、歷史紀錄）
  - [ ] 3.7 實作 AI 回應速度優化（並行處理、回應時間監控）
  - [ ] 3.8 建立內容審核機制（不當內容過濾、品質控制）

- [ ] 4.0 商戶後台管理系統
  - [ ] 4.1 實作商戶註冊與認證流程（身份驗證、商戶審核）
  - [ ] 4.2 開發內容管理系統（導覽內容上傳、編輯、刪除）
  - [ ] 4.3 建立檔案上傳功能（圖片、影片處理、S3 儲存整合）
  - [ ] 4.4 實作批量內容上傳功能（CSV 匯入、資料驗證）
  - [ ] 4.5 開發商品展示功能（商品資訊管理、分類系統）
  - [ ] 4.6 建立商戶後台儀表板（數據統計、內容管理介面）
  - [ ] 4.7 實作內容版本控制（草稿/發布狀態、變更歷史）
  - [ ] 4.8 開發內容搜尋與篩選功能（商品分類、關鍵字搜尋）

- [ ] 5.0 多語言支援與系統優化
  - [ ] 5.1 實作國際化框架（i18n 配置、語言包管理）
  - [ ] 5.2 開發自動語言偵測功能（瀏覽器語言、地理位置）
  - [ ] 5.3 建立多語言內容管理（翻譯工作流、品質控制）
  - [ ] 5.4 實作系統效能優化（程式碼分割、懶加載、圖片優化）
  - [ ] 5.5 建立安全性強化措施（SQL 注入防護、XSS 防護、CSRF 保護）
  - [ ] 5.6 實作系統備份與災害復原機制
  - [ ] 5.7 開發並發處理優化（支援 1000+ 同時用戶）
  - [ ] 5.8 實作用戶體驗優化（載入動畫、錯誤處理、離線支援）