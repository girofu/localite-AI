# Develop by Task Rule

## 功能描述

執行 "任務清單" 中的 "任務項目"，並且必須依照 "執行任務方式" 的方式執行，執行後根據 "紀錄清單" 來紀錄遭遇的問題與修正方式。

## 參數說明

### 1. 任務清單 (Task List)

- **用途**: 指定包含任務項目的清單文件
- **預設值**: `@tasks-localite-prd.mdc`
- **格式**: `@filename.mdc` 或 rule 指令

### 2. 任務項目 (Task Item)

- **用途**: 指定要執行的具體任務項次
- **預設值**: 根據 `@tasks-localite-prd.mdc` 的未完成最近項目
- **格式**: 任務編號 (例如: `2.5.1`, `1.6.2.3`)

### 3. 執行任務方式 (Task Execution Method)

- **用途**: 指定執行任務的方式和流程
- **預設值**: `@process-task-list.mdc`
- **格式**: `@filename.mdc` 或 rule 指令

### 4. 紀錄清單 (Record List)

- **用途**: 指定記錄問題與修正方式的文件
- **預設值**: `@fyi.mdc`
- **格式**: `@filename.mdc` 或 rule 指令

## 使用方式

### 完整語法

```
@develop-by-task
1. [任務清單]
2. [任務項目]
3. [執行任務方式]
4. [紀錄清單]
```

### 使用範例

#### 範例 1: 完整參數

```
@develop-by-task
1. @tasks-localite-prd.mdc
2. 2.5.1
3. @process-task-list.mdc
4. @fyi.mdc
```

#### 範例 2: 使用預設值

```
@develop-by-task
2.5.1
```

#### 範例 3: 自動選擇未完成任務

```
@develop-by-task
```

## 執行流程

### 階段一：任務準備與影響分析

1. **讀取任務清單**: 從指定的任務清單文件中讀取任務結構
2. **定位任務項目**: 找到指定的任務項目或自動選擇下一個未完成任務
3. **程式碼影響分析** (新增):
   - 使用 `grep -r` 查找所有引用當前要修改的檔案
   - 檢查 exports/imports 依賴關係
   - 確認介面契約變更影響範圍
   - 列出可能受影響的功能模組
   - 預估需要額外測試的範圍

### 階段二：任務執行

4. **應用執行方式**: 根據指定的執行任務方式規則來執行任務
5. **執行任務**: 按照任務要求和執行方式進行實際的開發工作

### 階段三：多層級驗證 (增強)

6. **單元測試**: 執行當前功能的單元測試
7. **相關功能測試**: 根據影響分析結果，執行可能受影響模組的測試
8. **整合測試**: 執行 API 端點和資料庫互動測試
9. **完整測試套件**: 執行完整測試套件確保整體穩定性
10. **手動煙霧測試**: 驗證關鍵功能路徑仍正常運作

### 階段四：記錄與提交

11. **記錄問題**: 將遭遇的問題、錯誤和修正方式記錄到指定的紀錄清單中
12. **更新任務狀態**: 更新任務清單中的任務完成狀態

## 程式碼影響分析檢查清單

在開始實作前，必須執行以下檢查：

### 依賴關係分析

- [ ] 檢查檔案的 import/export 關係
- [ ] 確認是否有其他模組依賴當前要修改的功能
- [ ] 檢查共享的 utilities、services、或 constants

### 功能邊界確認

- [ ] 列出此次修改會直接影響的功能點
- [ ] 確認是否影響中間件或全域配置
- [ ] 檢查是否修改公共介面或 API 契約

### 測試策略規劃

- [ ] 規劃需要新增的測試案例
- [ ] 確認需要額外執行的相關測試
- [ ] 評估是否需要建立整合測試

## 段階式測試策略

執行測試的順序和要求：

1. **即時測試** (修改過程中)
   - 修改任何檔案後立即執行該檔案的單元測試
   - 確保基本功能正常運作

2. **相關測試** (功能完成後)
   - 根據影響分析結果執行相關模組測試
   - 特別注意共享元件和服務的測試

3. **整合測試** (API 層級)
   - 執行涉及的 API 端點測試
   - 驗證資料庫互動正常

4. **完整測試** (系統層級)
   - 執行完整測試套件
   - 確保所有功能穩定

5. **手動驗證** (關鍵路徑)
   - 測試主要用戶流程
   - 驗證核心功能未受影響

## 自動任務選擇邏輯

當未指定任務項目時，系統將自動選擇：

1. 查找任務清單中所有未完成的任務 (`[ ]`)
2. 選擇層級最深的未完成任務（子任務優先）
3. 如果同層級有多個未完成任務，選擇編號最小的
4. 確保該任務的前置任務已完成

## 記錄格式

執行過程中的問題和修正方式將按照以下格式記錄：

```markdown
## 錯誤修正記錄 (YYYY-MM-DD) - 任務 X.X [Task Name]

### 程式碼影響分析結果

- 受影響的檔案清單
- 需要額外測試的模組

### 錯誤現象

- 具體的錯誤訊息或行為描述

### 原因

- 錯誤發生的根本原因分析

### 解決方案

- 具體的修正步驟和程式碼範例

### 相關影響

- 修正對其他功能的影響或注意事項
- 額外執行的測試結果

### 預防措施

- 為避免類似問題的建議做法
```

## 注意事項

1. **任務依賴**: 確保執行任務前，其依賴的前置任務已完成
2. **影響分析**: 每個任務開始前必須進行程式碼影響分析
3. **段階式測試**: 遵循段階式測試策略，不可跳過任何測試階段
4. **提交規範**: 按照執行任務方式的提交規範進行版本控制
5. **錯誤記錄**: 及時記錄遭遇的問題，包含影響分析結果
6. **預防優先**: 寧可多花時間在分析階段，也不要冒險破壞現有功能

## 與其他 Rule 的關聯

- **依賴**: `@process-task-list.mdc` - 任務執行流程規範
- **輸入**: `@tasks-localite-prd.mdc` - 項目任務清單
- **輸出**: `@fyi.mdc` - 問題記錄和經驗分享
