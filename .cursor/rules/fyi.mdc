---
description: 
globs: 
alwaysApply: true
---
# Localite V3 開發經驗與提示

## TypeScript & Node.js 後端開發

### 專案結構最佳實踐
- 使用 `apps/backend/src/` 結構組織程式碼
- 分離 controllers、middleware、models、routes 目錄
- 使用 TypeScript 嚴格模式進行開發

### Firebase 整合要點
1. **環境變數配置**
   - 確保 `FIREBASE_ADMIN_SDK_KEY` 環境變數正確設定
   - 使用 `firebase-admin` SDK 進行伺服器端認證
   - Firebase 配置應在 `src/config/firebase.ts` 中集中管理

2. **認證中間件實作**
   - 創建 `authMiddleware.ts` 處理 JWT token 驗證
   - 使用 `admin.auth().verifyIdToken()` 驗證 Firebase token
   - 將解碼的用戶資訊附加到 request 物件上

### 資料庫設計原則

#### MongoDB 與 Mongoose
- 使用 Mongoose schemas 定義資料模型
- 實作適當的索引以提升查詢效能
- 分離 User、Tour、Content、Merchant 等核心模型

#### 資料模型設計
```typescript
// User 模型必須包含
interface User {
  firebaseId: string; // Firebase UID
  email: string;
  role: 'admin' | 'merchant' | 'user';
  profile: UserProfile;
  preferences: UserPreferences;
}
```

### API 設計規範

#### 路由結構
- 使用 `/api/v1/` 版本前綴
- RESTful 設計原則
- 統一錯誤處理格式

#### 中間件順序
1. 日誌記錄 (requestLogger)
2. 身份驗證 (authMiddleware)
3. 請求驗證 (validationMiddleware)
4. 業務邏輯處理

### 錯誤處理最佳實踐

#### 常見問題與解決方案
1. **Redis 配置問題**
   - 確保 Redis 連線字串正確
   - 處理連線失敗的 fallback 機制
   - 避免在沒有 Redis 時直接拋出錯誤

2. **TypeScript 編譯錯誤**
   - 確保所有類型定義正確
   - 使用 `npm run build` 檢查編譯錯誤
   - 注意 async/await 的返回類型

3. **Firebase 認證問題**
   - 檢查服務帳戶金鑰是否正確
   - 確保 Firebase 專案設定正確
   - 處理 token 過期和無效的情況

### 開發流程建議

#### 步驟順序
1. 先完成基礎架構設定
2. 實作認證系統
3. 建立資料模型
4. 開發 API 端點
5. 整合第三方服務（AI、支付等）

#### 測試策略
- 每完成一個模組就進行 TypeScript 編譯檢查
- 使用 Postman 或類似工具測試 API 端點
- 建立基礎的單元測試框架

### 效能優化要點

#### 快取策略
- 使用 Redis 快取常用查詢結果
- 實作適當的快取失效機制
- 避免不必要的資料庫查詢

#### 安全考量
- 實作適當的 rate limiting
- 驗證所有輸入參數
- 使用 CORS 設定限制來源
- 敏感資料加密存儲

### 部署準備

#### 環境變數清單
```bash
MONGODB_URI=
FIREBASE_ADMIN_SDK_KEY=
REDIS_URL=
JWT_SECRET=
GOOGLE_CLOUD_PROJECT_ID=
PORT=
NODE_ENV=
```

#### 容器化注意事項
- 確保 Dockerfile 包含所有必要依賴
- 設定適當的健康檢查
- 處理 graceful shutdown

## 前端開發提示

### React + TypeScript 最佳實踐
- 使用功能元件和 hooks
- 實作適當的錯誤邊界
- 使用 Context API 管理全域狀態

### 移動端考量
- 響應式設計原則
- PWA 功能實作
- 離線功能支援

## 專案管理建議

### 開發檢查點
- 每週進行程式碼審查
- 定期更新依賴套件
- 監控應用程式效能指標

### 文件維護
- 更新 API 文件（Swagger）
- 維護 README 和 SETUP 指南
- 記錄重要的架構決策

## 常見錯誤避免

1. **不要在初期過度設計**
   - 先實作 MVP 功能
   - 後續再進行優化

2. **確保型別安全**
   - 使用 TypeScript strict mode
   - 避免使用 `any` 類型

3. **環境設定一致性**
   - 使用 Docker 確保開發環境一致
   - 建立詳細的設定文件

4. **第三方服務整合**
   - 實作適當的錯誤處理
   - 準備備案方案
   - 監控 API 使用量和成本

## 錯誤修正記錄 (2025-06-15)

### 1. MongoDB 端口佔用問題
**錯誤現象**：`Address already in use` 端口 27017 被佔用
**解決方案**：
```bash
# 查看佔用端口的進程
lsof -i :27017

# 停止現有服務
brew services stop mongodb-community

# 強制終止進程
sudo lsof -t -i:27017 | xargs sudo kill -9

# 重新啟動
brew services start mongodb-community
```

### 2. Redis createClient 導入錯誤
**錯誤現象**：`Cannot read properties of undefined (reading 'createClient')`
**原因**：Redis v4+ 版本的導入方式改變  
**解決方案**：
```typescript
// 錯誤的導入方式
import Redis from 'redis';
this.client = Redis.createClient({

// 正確的導入方式
import { createClient, RedisClientType } from 'redis';
this.client = createClient({
```

### 3. Cache Service 方法缺失
**錯誤現象**：`this.cacheService.del is not a function`
**解決方案**：在 CacheService 中添加 del 方法別名
```typescript
async del(key: string): Promise<boolean> {
  return this.delete(key);
}
```

### 4. 語音合成暫存目錄問題
**錯誤現象**：`ENOENT: no such file or directory, open '.../temp/...'`
**解決方案**：
```bash
mkdir -p apps/backend/temp
```

### 5. Google Cloud API 配置問題
**錯誤現象**：Vertex AI API 403 Forbidden 錯誤
**解決方案**：
1. 到 Google Cloud Console 啟用 Vertex AI API
2. 設定環境變數：`GOOGLE_CLOUD_LOCATION=us-central1`
3. 確保服務帳戶金鑰正確設定

## 錯誤修正記錄 (2025-01-22)

### 6. TypeScript 編譯錯誤大量修正 (54 個錯誤)
**錯誤現象**：`npm run build` 失敗，TypeScript 編譯錯誤
**解決方案**：

#### 6.1 Firebase 配置缺失
**錯誤現象**：`Cannot find module '../config/firebase-config'`
**解決方案**：
```typescript
// 創建 firebase-config.ts
import admin from 'firebase-admin';

const initializeFirebase = () => {
  if (admin.apps.length === 0) {
    const serviceAccount = process.env.NODE_ENV === 'production'
      ? JSON.parse(process.env.FIREBASE_ADMIN_SDK_KEY!)
      : require('../../config/firebase-service-account.json');
    
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      projectId: process.env.GOOGLE_CLOUD_PROJECT_ID
    });
  }
  return admin;
};

export default initializeFirebase;
```

#### 6.2 錯誤類型處理問題
**錯誤現象**：`Parameter 'error' implicitly has an 'any' type`
**解決方案**：統一使用錯誤處理模式
```typescript
// 錯誤的處理方式
} catch (error) {
  this.logger.error('Error:', error);
  throw new Error(error.message);
}

// 正確的處理方式
} catch (error) {
  const errorMessage = error instanceof Error ? error.message : '未知錯誤';
  this.logger.error('Error:', errorMessage);
  throw new Error(errorMessage);
}
```

#### 6.3 Vertex AI 導入錯誤
**錯誤現象**：`Module '"@google-cloud/aiplatform"' has no exported member 'VertexAI'`
**解決方案**：
```typescript
// 錯誤的導入
import { VertexAI } from '@google-cloud/aiplatform';

// 正確的導入
import { VertexAI } from '@google-cloud/vertexai';
```

#### 6.4 類型系統統一問題
**錯誤現象**：`Property 'userId' does not exist on type 'Request'`
**解決方案**：
```typescript
// 在 types/express.d.ts 中統一定義
declare global {
  namespace Express {
    interface Request {
      user?: admin.auth.DecodedIdToken;
    }
  }
}

// 使用時統一用 req.user!.uid 而非 req.userId
```

#### 6.5 Redis 配置更新
**錯誤現象**：`Property 'retry_strategy' does not exist`
**解決方案**：
```typescript
// 舊版配置
retry_strategy: (options) => Math.min(options.attempt * 100, 3000)

// 新版配置
socket: {
  reconnectStrategy: (retries) => Math.min(retries * 100, 3000)
}
```

#### 6.6 重複 Auth Middleware 問題
**錯誤現象**：`Cannot redeclare block-scoped variable`
**解決方案**：刪除舊的 `auth.ts` 文件，統一使用 `auth-middleware.ts`

#### 6.7 路由類型安全問題
**錯誤現象**：`Parameter 'req' implicitly has an 'any' type`
**解決方案**：為路由處理器添加明確類型
```typescript
// 修正前
router.post('/generate', authMiddleware, tourController.generateTour);

// 修正後
router.post('/generate', authMiddleware, (req: Request, res: Response) => tourController.generateTour(req, res));
```

#### 6.8 Controller 方法缺失
**錯誤現象**：`Property 'deleteAccount' does not exist`
**解決方案**：在 authController 中添加缺失的方法
```typescript
async deleteAccount(req: Request, res: Response): Promise<void> {
  try {
    // 實作刪除帳戶邏輯
    res.status(200).json({ message: '帳戶已刪除' });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '刪除帳戶失敗';
    res.status(500).json({ error: errorMessage });
  }
}
```

## 錯誤修正記錄 (2025-06-16) - AI服務整合測試

### 7. Vertex AI 模型版本不支援問題
**錯誤現象**：`Publisher Model 'projects/localite-ai/locations/us-central1/publishers/google/models/gemini-1.5-pro' was not found`
**原因**：Google Cloud專案尚未啟用最新的Gemini模型
**解決方案**：實作模型fallback機制
```typescript
// 在 ai-service.ts 中實作多模型fallback
private async callVertexAI(prompt: string): Promise<string> {
  const modelNames = [
    'gemini-1.0-pro',
    'gemini-pro', 
    'text-bison@001'
  ];
  
  for (const modelName of modelNames) {
    try {
      const model = this.vertexAI.getGenerativeModel({
        model: modelName,
        generationConfig: { /* ... */ }
      });
      // 嘗試調用模型...
    } catch (error) {
      continue; // 嘗試下一個模型
    }
  }
  
  // 如果所有模型都失敗，返回模擬內容
  return this.generateMockTourContent(prompt);
}
```

### 8. VertexAI 專案ID缺失問題
**錯誤現象**：`IllegalArgumentError: Unable to infer your project. Please provide a project Id`
**原因**：VertexAI初始化時未指定project參數
**解決方案**：
```typescript
// 在 ai-service.ts 構造函數中明確指定project
this.vertexAI = new VertexAI({
  project: process.env.GOOGLE_CLOUD_PROJECT_ID || 'localite-ai',
  location: process.env.VERTEX_AI_LOCATION || 'us-central1'
});
```

### 9. 服務啟動時立即初始化AI服務問題
**錯誤現象**：路由註冊時就嘗試初始化AIService導致啟動失敗
**解決方案**：改為懶加載模式
```typescript
// 在 tour-controller.ts 中改為懶加載
export class TourController {
  private aiService: AIService | null = null;
  
  private getAIService(): AIService {
    if (!this.aiService) {
      this.aiService = new AIService();
    }
    return this.aiService;
  }
  
  // 使用時調用 this.getAIService() 而非 this.aiService
}
```

### 10. 路由未註冊問題
**錯誤現象**：`ROUTE_NOT_FOUND` - tour相關API端點404
**解決方案**：在主服務器檔案中註冊tour路由
```typescript
// 在 index.ts 中添加
import tourRoutes from './routes/tour-routes';
app.use('/api/v1/tours', tourRoutes);
```

### 11. 開發環境認證測試問題
**錯誤現象**：測試API時需要真實的Firebase token
**解決方案**：為開發環境添加測試bypass
```typescript
// 在 auth-middleware.ts 中添加
if (process.env.NODE_ENV === 'development') {
  const testHeader = req.headers['x-test-user'];
  if (testHeader === 'test-user') {
    req.user = {
      uid: 'test-user-123',
      email: 'test@localite.com',
      role: 'user',
      // ... 其他必要屬性
    };
    return next();
  }
}
```

### 12. 單元測試Mock不符實際實作問題
**錯誤現象**：Jest測試失敗，Mock的預期與實際AI服務回應不符
**解決方案**：
1. 優先使用手動測試工具驗證功能正確性
2. 更新Mock設定以符合實際AI服務行為
3. 使用整合測試替代部分單元測試

### AI服務測試工具使用指南
**完整測試流程**：
```bash
# 1. 環境檢查
npm run test:ai:cache

# 2. 分項功能測試  
npm run test:ai:generate
npm run test:ai:translate
npm run test:ai:speech

# 3. 完整測試套件
npm run test:ai

# 4. API端點測試（需要服務器運行）
curl -X GET "http://localhost:8000/api/v1/tours/languages" \
  -H "X-Test-User: test-user"
```
